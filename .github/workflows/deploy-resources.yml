name: Build, Test, Deploy

on:  
  push:
    branches: main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
  # Restore, Build, ad Test Code Set
    - name: Install dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test
      run: dotnet test --no-restore --verbosity normal
    
    - name: Publish
      run: dotnet publish -c Release -o 'artifacts/rocketapi'

    - uses: azure/actions/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

  # Create data resources using Azure Cli
    - name: Azure CLI - Create Data Resources
      uses: azure/CLI@v1
      with:
        azcliversion: 2.0.72
        inlineScript: |
          az sql server create -l westus2 -u rbanick -p ${{ secrets.SQL_CREDENTIALS }} -n ${{ secrets.SQL_SERVER_NAME }} -g ${{ secrets.AZURE_RG }}
          az sql db create -g ${{ secrets.AZURE_RG }} -s ${{ secrets.SQL_SERVER_NAME }} -n ${{ secrets.SQL_DB_NAME }} -e Standard

  # Create the App Service w/ARM Template
    - name: ARM Deploy - Create App Service Resoures
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: .github/workflows/app-service-template.json
        parameters: BaseName=${{ secrets.APP_BASENAME }} AzureAppConfig:Endpoint=${{ secrets.APPCONFIG_ENDPOINT }}
  
  # Deploy code to app service
    - name: Deploy App Service
      uses: azure/webapps-deploy@v2
      with: 
            app-name: ${{ secrets.APPSERVICE_NAME }}
            package: 'artifacts/rocketapi'

  # Post Deployment Configuration
    - name: Post Deploy Configuration
      uses: azure/CLI@v1
      with:        
        azcliversion: 2.0.72
        inlineScript: |
          id=$(az webapp identity assign -n ${{ secrets.APPSERVICE_NAME }} -g ${{ secrets.AZURE_RG }} | jq -r '.principalId')
          az keyvault set-policy -n ${{ secrets.VAULT_NAME }} --secret-permissions get list --object-id $id
          acId=$(az appconfig show --name ${{ secrets.APP_CONFIGURATION_NAME }} | jq -r '.id')
          az role assignment create --assignee-object-id $id --role "App Configuration Data Reader" --scope $acId
